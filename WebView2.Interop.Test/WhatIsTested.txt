IWebView2WebView
==================================================
YES  IWebView2Settings Settings { get; }

YES  string Source { get; }

YES  void Navigate([In, MarshalAs(UnmanagedType.LPWStr)] string uri);

YES  void MoveFocus([In] WEBVIEW2_MOVE_FOCUS_REASON reason);

YES  void NavigateToString([In, MarshalAs(UnmanagedType.LPWStr)] string htmlContent);

YES  void add_NavigationStarting([In] IWebView2NavigationStartingEventHandler eventHandler, out EventRegistrationToken token);

YES  void remove_NavigationStarting([In] EventRegistrationToken token);

YES  void add_DocumentStateChanged([In] IWebView2DocumentStateChangedEventHandler eventHandler, out EventRegistrationToken token);

YES  void remove_DocumentStateChanged([In] EventRegistrationToken token);

YES  void add_NavigationCompleted([In] IWebView2NavigationCompletedEventHandler eventHandler, out EventRegistrationToken token);

YES  void remove_NavigationCompleted([In] EventRegistrationToken token);

YES  void add_FrameNavigationStarting([In] IWebView2NavigationStartingEventHandler eventHandler, out EventRegistrationToken token);

YES  void remove_FrameNavigationStarting([In] EventRegistrationToken token);

YES  void add_MoveFocusRequested([In] IWebView2MoveFocusRequestedEventHandler eventHandler, out EventRegistrationToken token);

YES  void remove_MoveFocusRequested([In] EventRegistrationToken token);

YES  void add_GotFocus([In] IWebView2FocusChangedEventHandler eventHandler, out EventRegistrationToken token);

YES  void remove_GotFocus([In] EventRegistrationToken token);

YES  void add_LostFocus([In] IWebView2FocusChangedEventHandler eventHandler, out EventRegistrationToken token);

YES  void remove_LostFocus([In] EventRegistrationToken token);

        void add_WebResourceRequested([In, MarshalAs(UnmanagedType.LPWStr)] ref string urlFilter, ref WEBVIEW2_WEB_RESOURCE_CONTEXT resourceContextFilter, ulong filterLength, IWebView2WebResourceRequestedEventHandler eventHandler, out EventRegistrationToken token);

        void remove_WebResourceRequested(EventRegistrationToken token);

YES  void add_ScriptDialogOpening([In] IWebView2ScriptDialogOpeningEventHandler eventHandler, out EventRegistrationToken token);

YES  void remove_ScriptDialogOpening([In] EventRegistrationToken token);

YES  void add_ZoomFactorChanged([In] IWebView2ZoomFactorChangedEventHandler eventHandler, out EventRegistrationToken token);

YES  void remove_ZoomFactorChanged([In] EventRegistrationToken token);

YES  void add_PermissionRequested([In] IWebView2PermissionRequestedEventHandler eventHandler, out EventRegistrationToken token);

YES  void remove_PermissionRequested([In] EventRegistrationToken token);

YES  void add_ProcessFailed([In] IWebView2ProcessFailedEventHandler eventHandler, out EventRegistrationToken token);

YES  void remove_ProcessFailed([In] EventRegistrationToken token);

YES  void AddScriptToExecuteOnDocumentCreated([In, MarshalAs(UnmanagedType.LPWStr)] string javaScript, IWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler handler);

YES  void RemoveScriptToExecuteOnDocumentCreated([In, MarshalAs(UnmanagedType.LPWStr)] string id);

YES  void ExecuteScript([In, MarshalAs(UnmanagedType.LPWStr)] string javaScript, IWebView2ExecuteScriptCompletedHandler handler);

        void CapturePreview(WEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT imageFormat, IStream imageStream, IWebView2CapturePreviewCompletedHandler handler);

YES  void Reload();

YES  tagRECT Bounds { get; set; }

YES  double ZoomFactor { get; set; }

YES  bool IsVisible  { get; set; }

YES  void PostWebMessageAsJson([In, MarshalAs(UnmanagedType.LPWStr)] string webMessageAsJson);

YES  void PostWebMessageAsString([In, MarshalAs(UnmanagedType.LPWStr)] string webMessageAsString);

YES  void add_WebMessageReceived([In] IWebView2WebMessageReceivedEventHandler handler, out EventRegistrationToken token);

YES  void remove_WebMessageReceived([In] EventRegistrationToken token);
    
YES  void Close();

YES  void CallDevToolsProtocolMethod([In, MarshalAs(UnmanagedType.LPWStr)] string methodName, [In, MarshalAs(UnmanagedType.LPWStr)] string parametersAsJson, IWebView2CallDevToolsProtocolMethodCompletedHandler handler);

YES  void add_DevToolsProtocolEventReceived([In, MarshalAs(UnmanagedType.LPWStr)] string eventName, IWebView2DevToolsProtocolEventReceivedEventHandler handler, out EventRegistrationToken token);

YES  void remove_DevToolsProtocolEventReceived([In, MarshalAs(UnmanagedType.LPWStr)]string eventName, EventRegistrationToken token);

YES  uint BrowserProcessId { get; }

YES  bool CanGoBack { get; }
        
YES  bool CanGoForward { get; }

YES  void GoBack();

YES  void GoForward();

IWebView3WebView
==================================================

YES  void Stop();

        void add_NewWindowRequested([In] IWebView2NewWindowRequestedEventHandler eventHandler, out EventRegistrationToken token);

        void remove_NewWindowRequested([In] EventRegistrationToken token);

YES  void add_DocumentTitleChanged([In] IWebView2DocumentTitleChangedEventHandler eventHandler, out EventRegistrationToken token);

YES  void remove_DocumentTitleChanged([In] EventRegistrationToken token);

YES  void DocumentTitle([MarshalAs(UnmanagedType.LPWStr)] out string title);

IWebView4WebView
==================================================
        void AddRemoteObject([In, MarshalAs(UnmanagedType.LPWStr)] string name, [In] ref object @object);

        void RemoveRemoteObject([In, MarshalAs(UnmanagedType.LPWStr)] string name);

YES  void OpenDevToolsWindow();

        void add_AcceleratorKeyPressed([In] IWebView2AcceleratorKeyPressedEventHandler eventHandler, out EventRegistrationToken token);

        void remove_AcceleratorKeyPressed([In] EventRegistrationToken token);


IWebView2Environment
==================================================
YES  void CreateWebView([In] IntPtr parentWindow, [In] IWebView2CreateWebViewCompletedHandler handler);

     void CreateWebResourceResponse(IStream Content, int StatusCode, [In, MarshalAs(UnmanagedType.LPWStr)] string ReasonPhrase, 
 
IWebView2Environment2
==================================================
YES  string BrowserVersionInfo { get; }

IWebView2Environment3
==================================================
		void add_NewVersionAvailable([In] IWebView2NewVersionAvailableEventHandler eventHandler, out EventRegistrationToken token);

        void remove_NewVersionAvailable([In] EventRegistrationToken token);